///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DriverType driver type
// swagger:model DriverType

type DriverType struct {

	// built in
	// Read Only: true
	BuiltIn *bool `json:"built-in,omitempty"`

	// config
	Config DriverTypeConfig `json:"config"`

	// created time
	// Read Only: true
	CreatedTime int64 `json:"created-time,omitempty"`

	// id
	// Read Only: true
	ID strfmt.UUID `json:"id,omitempty"`

	// image
	// Required: true
	Image *string `json:"image"`

	// modified time
	// Read Only: true
	ModifiedTime int64 `json:"modified-time,omitempty"`

	// name
	// Required: true
	// Max Length: 32
	Name *string `json:"name"`

	// tags
	Tags DriverTypeTags `json:"tags"`
}

/* polymorph DriverType built-in false */

/* polymorph DriverType config false */

/* polymorph DriverType created-time false */

/* polymorph DriverType id false */

/* polymorph DriverType image false */

/* polymorph DriverType modified-time false */

/* polymorph DriverType name false */

/* polymorph DriverType tags false */

// Validate validates this driver type
func (m *DriverType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DriverType) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *DriverType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DriverType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DriverType) UnmarshalBinary(b []byte) error {
	var res DriverType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// IngestEventReader is a Reader for the IngestEvent structure.
type IngestEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IngestEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIngestEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewIngestEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewIngestEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewIngestEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewIngestEventDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIngestEventOK creates a IngestEventOK with default headers values
func NewIngestEventOK() *IngestEventOK {
	return &IngestEventOK{}
}

/*IngestEventOK handles this case with default header values.

Event emitted
*/
type IngestEventOK struct {
	Payload *v1.Emission
}

func (o *IngestEventOK) Error() string {
	return fmt.Sprintf("[POST /ingest][%d] ingestEventOK  %+v", 200, o.Payload)
}

func (o *IngestEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Emission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIngestEventBadRequest creates a IngestEventBadRequest with default headers values
func NewIngestEventBadRequest() *IngestEventBadRequest {
	return &IngestEventBadRequest{}
}

/*IngestEventBadRequest handles this case with default header values.

Invalid input
*/
type IngestEventBadRequest struct {
	Payload *v1.Error
}

func (o *IngestEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /ingest][%d] ingestEventBadRequest  %+v", 400, o.Payload)
}

func (o *IngestEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIngestEventUnauthorized creates a IngestEventUnauthorized with default headers values
func NewIngestEventUnauthorized() *IngestEventUnauthorized {
	return &IngestEventUnauthorized{}
}

/*IngestEventUnauthorized handles this case with default header values.

Unauthorized Request
*/
type IngestEventUnauthorized struct {
	Payload *v1.Error
}

func (o *IngestEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ingest][%d] ingestEventUnauthorized  %+v", 401, o.Payload)
}

func (o *IngestEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIngestEventForbidden creates a IngestEventForbidden with default headers values
func NewIngestEventForbidden() *IngestEventForbidden {
	return &IngestEventForbidden{}
}

/*IngestEventForbidden handles this case with default header values.

access to this resource is forbidden
*/
type IngestEventForbidden struct {
	Payload *v1.Error
}

func (o *IngestEventForbidden) Error() string {
	return fmt.Sprintf("[POST /ingest][%d] ingestEventForbidden  %+v", 403, o.Payload)
}

func (o *IngestEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIngestEventDefault creates a IngestEventDefault with default headers values
func NewIngestEventDefault(code int) *IngestEventDefault {
	return &IngestEventDefault{
		_statusCode: code,
	}
}

/*IngestEventDefault handles this case with default header values.

Unknown error
*/
type IngestEventDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the ingest event default response
func (o *IngestEventDefault) Code() int {
	return o._statusCode
}

func (o *IngestEventDefault) Error() string {
	return fmt.Sprintf("[POST /ingest][%d] IngestEvent default  %+v", o._statusCode, o.Payload)
}

func (o *IngestEventDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

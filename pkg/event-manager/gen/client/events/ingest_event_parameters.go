///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// NewIngestEventParams creates a new IngestEventParams object
// with the default values initialized.
func NewIngestEventParams() *IngestEventParams {
	var ()
	return &IngestEventParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIngestEventParamsWithTimeout creates a new IngestEventParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIngestEventParamsWithTimeout(timeout time.Duration) *IngestEventParams {
	var ()
	return &IngestEventParams{

		timeout: timeout,
	}
}

// NewIngestEventParamsWithContext creates a new IngestEventParams object
// with the default values initialized, and the ability to set a context for a request
func NewIngestEventParamsWithContext(ctx context.Context) *IngestEventParams {
	var ()
	return &IngestEventParams{

		Context: ctx,
	}
}

// NewIngestEventParamsWithHTTPClient creates a new IngestEventParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIngestEventParamsWithHTTPClient(client *http.Client) *IngestEventParams {
	var ()
	return &IngestEventParams{
		HTTPClient: client,
	}
}

/*IngestEventParams contains all the parameters to send to the API endpoint
for the ingest event operation typically these are written to a http.Request
*/
type IngestEventParams struct {

	/*AuthToken
	  Token to authenticate event

	*/
	AuthToken string
	/*Body
	  emission object

	*/
	Body *v1.Emission

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ingest event params
func (o *IngestEventParams) WithTimeout(timeout time.Duration) *IngestEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ingest event params
func (o *IngestEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ingest event params
func (o *IngestEventParams) WithContext(ctx context.Context) *IngestEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ingest event params
func (o *IngestEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ingest event params
func (o *IngestEventParams) WithHTTPClient(client *http.Client) *IngestEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ingest event params
func (o *IngestEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthToken adds the authToken to the ingest event params
func (o *IngestEventParams) WithAuthToken(authToken string) *IngestEventParams {
	o.SetAuthToken(authToken)
	return o
}

// SetAuthToken adds the authToken to the ingest event params
func (o *IngestEventParams) SetAuthToken(authToken string) {
	o.AuthToken = authToken
}

// WithBody adds the body to the ingest event params
func (o *IngestEventParams) WithBody(body *v1.Emission) *IngestEventParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the ingest event params
func (o *IngestEventParams) SetBody(body *v1.Emission) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *IngestEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param authToken
	qrAuthToken := o.AuthToken
	qAuthToken := qrAuthToken
	if qAuthToken != "" {
		if err := r.SetQueryParam("authToken", qAuthToken); err != nil {
			return err
		}
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

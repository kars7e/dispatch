// Code generated by mockery v1.0.0
package mocks

import client "github.com/vmware/dispatch/pkg/client"
import context "context"
import mock "github.com/stretchr/testify/mock"

// ImagesClient is an autogenerated mock type for the ImagesClient type
type ImagesClient struct {
	mock.Mock
}

// CreateBaseImage provides a mock function with given fields: _a0, _a1
func (_m *ImagesClient) CreateBaseImage(_a0 context.Context, _a1 *client.BaseImage) (*client.BaseImage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, *client.BaseImage) *client.BaseImage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.BaseImage) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: _a0, _a1
func (_m *ImagesClient) CreateImage(_a0 context.Context, _a1 *client.Image) (*client.Image, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Image
	if rf, ok := ret.Get(0).(func(context.Context, *client.Image) *client.Image); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.Image) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBaseImage provides a mock function with given fields: ctx, baseImageName
func (_m *ImagesClient) DeleteBaseImage(ctx context.Context, baseImageName string) (*client.BaseImage, error) {
	ret := _m.Called(ctx, baseImageName)

	var r0 *client.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.BaseImage); ok {
		r0 = rf(ctx, baseImageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, baseImageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: ctx, imageName
func (_m *ImagesClient) DeleteImage(ctx context.Context, imageName string) (*client.Image, error) {
	ret := _m.Called(ctx, imageName)

	var r0 *client.Image
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Image); ok {
		r0 = rf(ctx, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseImage provides a mock function with given fields: ctx, baseImageName
func (_m *ImagesClient) GetBaseImage(ctx context.Context, baseImageName string) (*client.BaseImage, error) {
	ret := _m.Called(ctx, baseImageName)

	var r0 *client.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.BaseImage); ok {
		r0 = rf(ctx, baseImageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, baseImageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, imageName
func (_m *ImagesClient) GetImage(ctx context.Context, imageName string) (*client.Image, error) {
	ret := _m.Called(ctx, imageName)

	var r0 *client.Image
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.Image); ok {
		r0 = rf(ctx, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBaseImages provides a mock function with given fields: _a0
func (_m *ImagesClient) ListBaseImages(_a0 context.Context) ([]client.BaseImage, error) {
	ret := _m.Called(_a0)

	var r0 []client.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context) []client.BaseImage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: _a0
func (_m *ImagesClient) ListImages(_a0 context.Context) ([]client.Image, error) {
	ret := _m.Called(_a0)

	var r0 []client.Image
	if rf, ok := ret.Get(0).(func(context.Context) []client.Image); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBaseImage provides a mock function with given fields: _a0, _a1
func (_m *ImagesClient) UpdateBaseImage(_a0 context.Context, _a1 *client.BaseImage) (*client.BaseImage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.BaseImage
	if rf, ok := ret.Get(0).(func(context.Context, *client.BaseImage) *client.BaseImage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseImage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.BaseImage) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: _a0, _a1
func (_m *ImagesClient) UpdateImage(_a0 context.Context, _a1 *client.Image) (*client.Image, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Image
	if rf, ok := ret.Get(0).(func(context.Context, *client.Image) *client.Image); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *client.Image) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package serviceaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// AddServiceAccountReader is a Reader for the AddServiceAccount structure.
type AddServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddServiceAccountCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddServiceAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddServiceAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddServiceAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddServiceAccountConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddServiceAccountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddServiceAccountCreated creates a AddServiceAccountCreated with default headers values
func NewAddServiceAccountCreated() *AddServiceAccountCreated {
	return &AddServiceAccountCreated{}
}

/*AddServiceAccountCreated handles this case with default header values.

created
*/
type AddServiceAccountCreated struct {
	Payload *v1.ServiceAccount
}

func (o *AddServiceAccountCreated) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccountCreated  %+v", 201, o.Payload)
}

func (o *AddServiceAccountCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.ServiceAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceAccountBadRequest creates a AddServiceAccountBadRequest with default headers values
func NewAddServiceAccountBadRequest() *AddServiceAccountBadRequest {
	return &AddServiceAccountBadRequest{}
}

/*AddServiceAccountBadRequest handles this case with default header values.

Invalid input
*/
type AddServiceAccountBadRequest struct {
	Payload *v1.Error
}

func (o *AddServiceAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccountBadRequest  %+v", 400, o.Payload)
}

func (o *AddServiceAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceAccountUnauthorized creates a AddServiceAccountUnauthorized with default headers values
func NewAddServiceAccountUnauthorized() *AddServiceAccountUnauthorized {
	return &AddServiceAccountUnauthorized{}
}

/*AddServiceAccountUnauthorized handles this case with default header values.

Unauthorized Request
*/
type AddServiceAccountUnauthorized struct {
	Payload *v1.Error
}

func (o *AddServiceAccountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *AddServiceAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceAccountForbidden creates a AddServiceAccountForbidden with default headers values
func NewAddServiceAccountForbidden() *AddServiceAccountForbidden {
	return &AddServiceAccountForbidden{}
}

/*AddServiceAccountForbidden handles this case with default header values.

access to this resource is forbidden
*/
type AddServiceAccountForbidden struct {
	Payload *v1.Error
}

func (o *AddServiceAccountForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccountForbidden  %+v", 403, o.Payload)
}

func (o *AddServiceAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceAccountConflict creates a AddServiceAccountConflict with default headers values
func NewAddServiceAccountConflict() *AddServiceAccountConflict {
	return &AddServiceAccountConflict{}
}

/*AddServiceAccountConflict handles this case with default header values.

Already Exists
*/
type AddServiceAccountConflict struct {
	Payload *v1.Error
}

func (o *AddServiceAccountConflict) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccountConflict  %+v", 409, o.Payload)
}

func (o *AddServiceAccountConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddServiceAccountDefault creates a AddServiceAccountDefault with default headers values
func NewAddServiceAccountDefault(code int) *AddServiceAccountDefault {
	return &AddServiceAccountDefault{
		_statusCode: code,
	}
}

/*AddServiceAccountDefault handles this case with default header values.

Generic error response
*/
type AddServiceAccountDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the add service account default response
func (o *AddServiceAccountDefault) Code() int {
	return o._statusCode
}

func (o *AddServiceAccountDefault) Error() string {
	return fmt.Sprintf("[POST /v1/iam/serviceaccount][%d] addServiceAccount default  %+v", o._statusCode, o.Payload)
}

func (o *AddServiceAccountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// UpdatePolicyReader is a Reader for the UpdatePolicy structure.
type UpdatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatePolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdatePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdatePolicyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePolicyOK creates a UpdatePolicyOK with default headers values
func NewUpdatePolicyOK() *UpdatePolicyOK {
	return &UpdatePolicyOK{}
}

/*UpdatePolicyOK handles this case with default header values.

Successful update
*/
type UpdatePolicyOK struct {
	Payload *v1.Policy
}

func (o *UpdatePolicyOK) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicyOK  %+v", 200, o.Payload)
}

func (o *UpdatePolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyBadRequest creates a UpdatePolicyBadRequest with default headers values
func NewUpdatePolicyBadRequest() *UpdatePolicyBadRequest {
	return &UpdatePolicyBadRequest{}
}

/*UpdatePolicyBadRequest handles this case with default header values.

Invalid input
*/
type UpdatePolicyBadRequest struct {
	Payload *v1.Error
}

func (o *UpdatePolicyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicyBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyUnauthorized creates a UpdatePolicyUnauthorized with default headers values
func NewUpdatePolicyUnauthorized() *UpdatePolicyUnauthorized {
	return &UpdatePolicyUnauthorized{}
}

/*UpdatePolicyUnauthorized handles this case with default header values.

Unauthorized Request
*/
type UpdatePolicyUnauthorized struct {
	Payload *v1.Error
}

func (o *UpdatePolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyForbidden creates a UpdatePolicyForbidden with default headers values
func NewUpdatePolicyForbidden() *UpdatePolicyForbidden {
	return &UpdatePolicyForbidden{}
}

/*UpdatePolicyForbidden handles this case with default header values.

access to this resource is forbidden
*/
type UpdatePolicyForbidden struct {
	Payload *v1.Error
}

func (o *UpdatePolicyForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicyForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyNotFound creates a UpdatePolicyNotFound with default headers values
func NewUpdatePolicyNotFound() *UpdatePolicyNotFound {
	return &UpdatePolicyNotFound{}
}

/*UpdatePolicyNotFound handles this case with default header values.

Policy not found
*/
type UpdatePolicyNotFound struct {
	Payload *v1.Error
}

func (o *UpdatePolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicyNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyDefault creates a UpdatePolicyDefault with default headers values
func NewUpdatePolicyDefault(code int) *UpdatePolicyDefault {
	return &UpdatePolicyDefault{
		_statusCode: code,
	}
}

/*UpdatePolicyDefault handles this case with default header values.

Unknown error
*/
type UpdatePolicyDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the update policy default response
func (o *UpdatePolicyDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePolicyDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/iam/policy/{policyName}][%d] updatePolicy default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePolicyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

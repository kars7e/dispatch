///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// DeleteOrganizationOKCode is the HTTP code returned for type DeleteOrganizationOK
const DeleteOrganizationOKCode int = 200

/*DeleteOrganizationOK Successful operation

swagger:response deleteOrganizationOK
*/
type DeleteOrganizationOK struct {

	/*
	  In: Body
	*/
	Payload *v1.Organization `json:"body,omitempty"`
}

// NewDeleteOrganizationOK creates DeleteOrganizationOK with default headers values
func NewDeleteOrganizationOK() *DeleteOrganizationOK {

	return &DeleteOrganizationOK{}
}

// WithPayload adds the payload to the delete organization o k response
func (o *DeleteOrganizationOK) WithPayload(payload *v1.Organization) *DeleteOrganizationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization o k response
func (o *DeleteOrganizationOK) SetPayload(payload *v1.Organization) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteOrganizationBadRequestCode is the HTTP code returned for type DeleteOrganizationBadRequest
const DeleteOrganizationBadRequestCode int = 400

/*DeleteOrganizationBadRequest Invalid Name supplied

swagger:response deleteOrganizationBadRequest
*/
type DeleteOrganizationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewDeleteOrganizationBadRequest creates DeleteOrganizationBadRequest with default headers values
func NewDeleteOrganizationBadRequest() *DeleteOrganizationBadRequest {

	return &DeleteOrganizationBadRequest{}
}

// WithPayload adds the payload to the delete organization bad request response
func (o *DeleteOrganizationBadRequest) WithPayload(payload *v1.Error) *DeleteOrganizationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization bad request response
func (o *DeleteOrganizationBadRequest) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteOrganizationUnauthorizedCode is the HTTP code returned for type DeleteOrganizationUnauthorized
const DeleteOrganizationUnauthorizedCode int = 401

/*DeleteOrganizationUnauthorized Unauthorized Request

swagger:response deleteOrganizationUnauthorized
*/
type DeleteOrganizationUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewDeleteOrganizationUnauthorized creates DeleteOrganizationUnauthorized with default headers values
func NewDeleteOrganizationUnauthorized() *DeleteOrganizationUnauthorized {

	return &DeleteOrganizationUnauthorized{}
}

// WithPayload adds the payload to the delete organization unauthorized response
func (o *DeleteOrganizationUnauthorized) WithPayload(payload *v1.Error) *DeleteOrganizationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization unauthorized response
func (o *DeleteOrganizationUnauthorized) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteOrganizationForbiddenCode is the HTTP code returned for type DeleteOrganizationForbidden
const DeleteOrganizationForbiddenCode int = 403

/*DeleteOrganizationForbidden access to this resource is forbidden

swagger:response deleteOrganizationForbidden
*/
type DeleteOrganizationForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewDeleteOrganizationForbidden creates DeleteOrganizationForbidden with default headers values
func NewDeleteOrganizationForbidden() *DeleteOrganizationForbidden {

	return &DeleteOrganizationForbidden{}
}

// WithPayload adds the payload to the delete organization forbidden response
func (o *DeleteOrganizationForbidden) WithPayload(payload *v1.Error) *DeleteOrganizationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization forbidden response
func (o *DeleteOrganizationForbidden) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteOrganizationNotFoundCode is the HTTP code returned for type DeleteOrganizationNotFound
const DeleteOrganizationNotFoundCode int = 404

/*DeleteOrganizationNotFound Organization not found

swagger:response deleteOrganizationNotFound
*/
type DeleteOrganizationNotFound struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewDeleteOrganizationNotFound creates DeleteOrganizationNotFound with default headers values
func NewDeleteOrganizationNotFound() *DeleteOrganizationNotFound {

	return &DeleteOrganizationNotFound{}
}

// WithPayload adds the payload to the delete organization not found response
func (o *DeleteOrganizationNotFound) WithPayload(payload *v1.Error) *DeleteOrganizationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization not found response
func (o *DeleteOrganizationNotFound) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteOrganizationDefault Unknown error

swagger:response deleteOrganizationDefault
*/
type DeleteOrganizationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewDeleteOrganizationDefault creates DeleteOrganizationDefault with default headers values
func NewDeleteOrganizationDefault(code int) *DeleteOrganizationDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteOrganizationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete organization default response
func (o *DeleteOrganizationDefault) WithStatusCode(code int) *DeleteOrganizationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete organization default response
func (o *DeleteOrganizationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete organization default response
func (o *DeleteOrganizationDefault) WithPayload(payload *v1.Error) *DeleteOrganizationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete organization default response
func (o *DeleteOrganizationDefault) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteOrganizationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package serviceaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// GetServiceAccountOKCode is the HTTP code returned for type GetServiceAccountOK
const GetServiceAccountOKCode int = 200

/*GetServiceAccountOK Successful operation

swagger:response getServiceAccountOK
*/
type GetServiceAccountOK struct {

	/*
	  In: Body
	*/
	Payload *v1.ServiceAccount `json:"body,omitempty"`
}

// NewGetServiceAccountOK creates GetServiceAccountOK with default headers values
func NewGetServiceAccountOK() *GetServiceAccountOK {

	return &GetServiceAccountOK{}
}

// WithPayload adds the payload to the get service account o k response
func (o *GetServiceAccountOK) WithPayload(payload *v1.ServiceAccount) *GetServiceAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account o k response
func (o *GetServiceAccountOK) SetPayload(payload *v1.ServiceAccount) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceAccountBadRequestCode is the HTTP code returned for type GetServiceAccountBadRequest
const GetServiceAccountBadRequestCode int = 400

/*GetServiceAccountBadRequest Invalid Name supplied

swagger:response getServiceAccountBadRequest
*/
type GetServiceAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetServiceAccountBadRequest creates GetServiceAccountBadRequest with default headers values
func NewGetServiceAccountBadRequest() *GetServiceAccountBadRequest {

	return &GetServiceAccountBadRequest{}
}

// WithPayload adds the payload to the get service account bad request response
func (o *GetServiceAccountBadRequest) WithPayload(payload *v1.Error) *GetServiceAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account bad request response
func (o *GetServiceAccountBadRequest) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceAccountUnauthorizedCode is the HTTP code returned for type GetServiceAccountUnauthorized
const GetServiceAccountUnauthorizedCode int = 401

/*GetServiceAccountUnauthorized Unauthorized Request

swagger:response getServiceAccountUnauthorized
*/
type GetServiceAccountUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetServiceAccountUnauthorized creates GetServiceAccountUnauthorized with default headers values
func NewGetServiceAccountUnauthorized() *GetServiceAccountUnauthorized {

	return &GetServiceAccountUnauthorized{}
}

// WithPayload adds the payload to the get service account unauthorized response
func (o *GetServiceAccountUnauthorized) WithPayload(payload *v1.Error) *GetServiceAccountUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account unauthorized response
func (o *GetServiceAccountUnauthorized) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceAccountForbiddenCode is the HTTP code returned for type GetServiceAccountForbidden
const GetServiceAccountForbiddenCode int = 403

/*GetServiceAccountForbidden access to this resource is forbidden

swagger:response getServiceAccountForbidden
*/
type GetServiceAccountForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetServiceAccountForbidden creates GetServiceAccountForbidden with default headers values
func NewGetServiceAccountForbidden() *GetServiceAccountForbidden {

	return &GetServiceAccountForbidden{}
}

// WithPayload adds the payload to the get service account forbidden response
func (o *GetServiceAccountForbidden) WithPayload(payload *v1.Error) *GetServiceAccountForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account forbidden response
func (o *GetServiceAccountForbidden) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceAccountNotFoundCode is the HTTP code returned for type GetServiceAccountNotFound
const GetServiceAccountNotFoundCode int = 404

/*GetServiceAccountNotFound Service Account not found

swagger:response getServiceAccountNotFound
*/
type GetServiceAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetServiceAccountNotFound creates GetServiceAccountNotFound with default headers values
func NewGetServiceAccountNotFound() *GetServiceAccountNotFound {

	return &GetServiceAccountNotFound{}
}

// WithPayload adds the payload to the get service account not found response
func (o *GetServiceAccountNotFound) WithPayload(payload *v1.Error) *GetServiceAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account not found response
func (o *GetServiceAccountNotFound) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceAccountDefault Unknown error

swagger:response getServiceAccountDefault
*/
type GetServiceAccountDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewGetServiceAccountDefault creates GetServiceAccountDefault with default headers values
func NewGetServiceAccountDefault(code int) *GetServiceAccountDefault {
	if code <= 0 {
		code = 500
	}

	return &GetServiceAccountDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get service account default response
func (o *GetServiceAccountDefault) WithStatusCode(code int) *GetServiceAccountDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get service account default response
func (o *GetServiceAccountDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get service account default response
func (o *GetServiceAccountDefault) WithPayload(payload *v1.Error) *GetServiceAccountDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service account default response
func (o *GetServiceAccountDefault) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceAccountDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package serviceaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// AddServiceAccountCreatedCode is the HTTP code returned for type AddServiceAccountCreated
const AddServiceAccountCreatedCode int = 201

/*AddServiceAccountCreated created

swagger:response addServiceAccountCreated
*/
type AddServiceAccountCreated struct {

	/*
	  In: Body
	*/
	Payload *v1.ServiceAccount `json:"body,omitempty"`
}

// NewAddServiceAccountCreated creates AddServiceAccountCreated with default headers values
func NewAddServiceAccountCreated() *AddServiceAccountCreated {

	return &AddServiceAccountCreated{}
}

// WithPayload adds the payload to the add service account created response
func (o *AddServiceAccountCreated) WithPayload(payload *v1.ServiceAccount) *AddServiceAccountCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account created response
func (o *AddServiceAccountCreated) SetPayload(payload *v1.ServiceAccount) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddServiceAccountBadRequestCode is the HTTP code returned for type AddServiceAccountBadRequest
const AddServiceAccountBadRequestCode int = 400

/*AddServiceAccountBadRequest Invalid input

swagger:response addServiceAccountBadRequest
*/
type AddServiceAccountBadRequest struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewAddServiceAccountBadRequest creates AddServiceAccountBadRequest with default headers values
func NewAddServiceAccountBadRequest() *AddServiceAccountBadRequest {

	return &AddServiceAccountBadRequest{}
}

// WithPayload adds the payload to the add service account bad request response
func (o *AddServiceAccountBadRequest) WithPayload(payload *v1.Error) *AddServiceAccountBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account bad request response
func (o *AddServiceAccountBadRequest) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddServiceAccountUnauthorizedCode is the HTTP code returned for type AddServiceAccountUnauthorized
const AddServiceAccountUnauthorizedCode int = 401

/*AddServiceAccountUnauthorized Unauthorized Request

swagger:response addServiceAccountUnauthorized
*/
type AddServiceAccountUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewAddServiceAccountUnauthorized creates AddServiceAccountUnauthorized with default headers values
func NewAddServiceAccountUnauthorized() *AddServiceAccountUnauthorized {

	return &AddServiceAccountUnauthorized{}
}

// WithPayload adds the payload to the add service account unauthorized response
func (o *AddServiceAccountUnauthorized) WithPayload(payload *v1.Error) *AddServiceAccountUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account unauthorized response
func (o *AddServiceAccountUnauthorized) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddServiceAccountForbiddenCode is the HTTP code returned for type AddServiceAccountForbidden
const AddServiceAccountForbiddenCode int = 403

/*AddServiceAccountForbidden access to this resource is forbidden

swagger:response addServiceAccountForbidden
*/
type AddServiceAccountForbidden struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewAddServiceAccountForbidden creates AddServiceAccountForbidden with default headers values
func NewAddServiceAccountForbidden() *AddServiceAccountForbidden {

	return &AddServiceAccountForbidden{}
}

// WithPayload adds the payload to the add service account forbidden response
func (o *AddServiceAccountForbidden) WithPayload(payload *v1.Error) *AddServiceAccountForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account forbidden response
func (o *AddServiceAccountForbidden) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddServiceAccountConflictCode is the HTTP code returned for type AddServiceAccountConflict
const AddServiceAccountConflictCode int = 409

/*AddServiceAccountConflict Already Exists

swagger:response addServiceAccountConflict
*/
type AddServiceAccountConflict struct {

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewAddServiceAccountConflict creates AddServiceAccountConflict with default headers values
func NewAddServiceAccountConflict() *AddServiceAccountConflict {

	return &AddServiceAccountConflict{}
}

// WithPayload adds the payload to the add service account conflict response
func (o *AddServiceAccountConflict) WithPayload(payload *v1.Error) *AddServiceAccountConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account conflict response
func (o *AddServiceAccountConflict) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddServiceAccountDefault Generic error response

swagger:response addServiceAccountDefault
*/
type AddServiceAccountDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *v1.Error `json:"body,omitempty"`
}

// NewAddServiceAccountDefault creates AddServiceAccountDefault with default headers values
func NewAddServiceAccountDefault(code int) *AddServiceAccountDefault {
	if code <= 0 {
		code = 500
	}

	return &AddServiceAccountDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add service account default response
func (o *AddServiceAccountDefault) WithStatusCode(code int) *AddServiceAccountDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add service account default response
func (o *AddServiceAccountDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add service account default response
func (o *AddServiceAccountDefault) WithPayload(payload *v1.Error) *AddServiceAccountDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add service account default response
func (o *AddServiceAccountDefault) SetPayload(payload *v1.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddServiceAccountDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

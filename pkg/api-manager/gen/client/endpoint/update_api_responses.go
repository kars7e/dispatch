///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/vmware/dispatch/pkg/api/v1"
)

// UpdateAPIReader is a Reader for the UpdateAPI structure.
type UpdateAPIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateAPIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateAPIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateAPIUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateAPIForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateAPINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateAPIDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAPIOK creates a UpdateAPIOK with default headers values
func NewUpdateAPIOK() *UpdateAPIOK {
	return &UpdateAPIOK{}
}

/*UpdateAPIOK handles this case with default header values.

Successful update
*/
type UpdateAPIOK struct {
	Payload *v1.API
}

func (o *UpdateAPIOK) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiOK  %+v", 200, o.Payload)
}

func (o *UpdateAPIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.API)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIBadRequest creates a UpdateAPIBadRequest with default headers values
func NewUpdateAPIBadRequest() *UpdateAPIBadRequest {
	return &UpdateAPIBadRequest{}
}

/*UpdateAPIBadRequest handles this case with default header values.

Invalid input
*/
type UpdateAPIBadRequest struct {
	Payload *v1.Error
}

func (o *UpdateAPIBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAPIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIUnauthorized creates a UpdateAPIUnauthorized with default headers values
func NewUpdateAPIUnauthorized() *UpdateAPIUnauthorized {
	return &UpdateAPIUnauthorized{}
}

/*UpdateAPIUnauthorized handles this case with default header values.

Unauthorized Request
*/
type UpdateAPIUnauthorized struct {
	Payload *v1.Error
}

func (o *UpdateAPIUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAPIUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIForbidden creates a UpdateAPIForbidden with default headers values
func NewUpdateAPIForbidden() *UpdateAPIForbidden {
	return &UpdateAPIForbidden{}
}

/*UpdateAPIForbidden handles this case with default header values.

access to this resource is forbidden
*/
type UpdateAPIForbidden struct {
	Payload *v1.Error
}

func (o *UpdateAPIForbidden) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAPIForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPINotFound creates a UpdateAPINotFound with default headers values
func NewUpdateAPINotFound() *UpdateAPINotFound {
	return &UpdateAPINotFound{}
}

/*UpdateAPINotFound handles this case with default header values.

API not found
*/
type UpdateAPINotFound struct {
	Payload *v1.Error
}

func (o *UpdateAPINotFound) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateApiNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIDefault creates a UpdateAPIDefault with default headers values
func NewUpdateAPIDefault(code int) *UpdateAPIDefault {
	return &UpdateAPIDefault{
		_statusCode: code,
	}
}

/*UpdateAPIDefault handles this case with default header values.

Unknown error
*/
type UpdateAPIDefault struct {
	_statusCode int

	Payload *v1.Error
}

// Code gets the status code for the update API default response
func (o *UpdateAPIDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAPIDefault) Error() string {
	return fmt.Sprintf("[PUT /{api}][%d] updateAPI default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateAPIDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(v1.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
